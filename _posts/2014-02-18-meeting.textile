---
layout: post
title: Meeting on the Feb 18, 2014
---
Ники

* Как да се споделят знания в дистанционен екип? Има "завихряне на интерес", когато хората са на едно място, което липсва, когато хората не са е един до друг или в различни часови зони.

Решението - събиране хората на едно място. Опитал е различни формати:
тип "уоркшоп" - да се направи малко мобилно приложение - не се е получило задоволително
тип "конференция за software engineering" - оказва се доста скучно
code retreat + pairing на живо е най-ефективно.


Стефан

* Чете за garbage collection - изключително тежка материя
* Организирането на RogueConf е трудно. Отнема много енергия и време.
* Мигрирал е от rvm -> rbenv за да забърза шела си
* Иска да създаде сборник от добри практики за водене на курсове и да го приложи в курса по Closure
* Заформи се дискусия на тема: дали добър дизайн се учи по-лесно с опит или чрез четене на теория.
* Ники: дефиниране на glossary на обектите в домейна помага при създаване на код. 
* Стефан: препоръчва секицията за ubiquitous language от Domain Driven Design. 


Вальо

* Занимава се с home automation - ползва продуктите на Olimex, които правя достъпни embedded системи

Използва система базирана на PIC32. Доста проблеми:
** зле направено IDE на Microchip
** опитал се да създаде image за VirtualBox с всички setup за по-лесен старт, но се е провалил заради емулацията на USB. 
** слабо community

* Защо Olimex:
** Два пъти по-евтино (20 лв vs 20EUR). 
** Има и други платки, съвместими с RPi, Arduino, но с по-добри параметри


Митко

* Колкото по-малко 3rd party dependancies, по-добре. Ако се ползва само малка част от дадена библиотека има смисъл да се реализира директно в проекта. Node/JS много често пакетират само отделни функции в библиотека за да я направя lightweight и да се избегне този проблем.
* github са "пуснали" diff на markdown - показва промяната на render-ното view
* готин feature в postgresql - listen/notify. Има gem, който го ползва - que, който реализира ACID compliant опашка. Гарантира надежност, която липсва при други реализации


Петко

* Бори се със eGov карта, която не работи на линукс. Свързал се е доставчиците на услугата. Чака отговор
* Търси DSL за описване на state machine:
* state-machine - тежък, най-обещаващ, но май ще си направи home-made решение. 
кога да се ползва state machine - за решаване на code smell, примерно при твърде много булеви променливи. Стефан смята, че FSA понякога води до по-нечетим код - т.е. създава, вместо да решава проблем


Радо

* Заниамава се с провеждане на интервюта за приемане в Хак България.
* След няколко интервюта формализира процеса - използва конкретен въпрос (array vs. assoc. array) за да отсее кандидатите и да оптимизира времето си
* Вальо: смята, че най-добрият начин за отсяване е тестова задача
* Ники: стриктен на ниво application. Ако CV-то е добро, то си струва да отделиш достатъчно време за интервю
* Отношението към начинаещите трябва да е приветливо, а не пренебрежително.
* Не-спането == добър в работата е мит. Броят часове не е от значение, всеки да си създаде индивидуален режим. TED talk по темата


Свилен

* занимава се с Javascript promises за да се спаси от callback hell и да направи кодът по-четим. Ползва $.Deferred() в jQuery 1.8.3
 tame.js, async.js - още решения за callbacks hell
* Когато се прави code review, винаги да се изтъква, че "кодът е проблемeн", не човекът, който го е писал, за да се избегне засягане на егото.

Misc

* Да не пазим и пращаме паролите в plain text по email
